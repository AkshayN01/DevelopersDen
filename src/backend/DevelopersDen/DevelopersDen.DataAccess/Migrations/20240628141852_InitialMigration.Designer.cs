// <auto-generated />
using System;
using System.Collections.Generic;
using DevelopersDen.Contracts.DBModels;
using DevelopersDen.Contracts.DBModels.JobSeeker;
using DevelopersDen.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DevelopersDen.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240628141852_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Job.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatuses");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Job.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JobType")
                        .HasColumnType("integer");

                    b.Property<List<string>>("KeySkills")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MinExperience")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecruiterAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("JobId");

                    b.HasIndex("RecruiterAccountId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Job.JobApplication", b =>
                {
                    b.Property<Guid>("JobApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobSeekerId")
                        .HasColumnType("uuid");

                    b.HasKey("JobApplicationId");

                    b.HasIndex("JobId");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Job.SavedJob", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobSeekerId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.ToTable("SavedJobs");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.JobSeeker.JobSeeker", b =>
                {
                    b.Property<Guid>("JobSeekerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsEmailVerified")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StakeholderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("JobSeekerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("JobSeekers");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.JobSeeker.JobSeekerProfile", b =>
                {
                    b.Property<Guid>("JobSeekerProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobSeekerId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("KeySkills")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<byte[]>("Resume")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<SearchFilter>("SearchFilter")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<WorkExperience>>("WorkExperience")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("JobSeekerProfileId");

                    b.HasIndex("JobSeekerId")
                        .IsUnique();

                    b.ToTable("JobSeekersProfiles");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IsSent")
                        .HasColumnType("integer");

                    b.Property<EmailNoti>("Noti")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("StakeholderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Recruiter.Recruiter", b =>
                {
                    b.Property<Guid>("RecruiterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("StakeholderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RecruiterId");

                    b.HasIndex("EmailId")
                        .IsUnique();

                    b.ToTable("Recruiters");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Recruiter.RecruiterAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsPrimary")
                        .HasColumnType("integer");

                    b.Property<int>("IsVerified")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VerificationToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailId")
                        .IsUnique();

                    b.HasIndex("RecruiterId");

                    b.ToTable("RecruiterAccounts");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Stakeholder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stakeholders");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Subscription", b =>
                {
                    b.Property<long>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SubscriptionId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("integer");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AllowedSubAccounts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PricePerMonth")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Job.Job", b =>
                {
                    b.HasOne("DevelopersDen.Contracts.DBModels.Recruiter.RecruiterAccount", "RecruiterAccount")
                        .WithMany("Jobs")
                        .HasForeignKey("RecruiterAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecruiterAccount");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Job.JobApplication", b =>
                {
                    b.HasOne("DevelopersDen.Contracts.DBModels.Job.Job", "Job")
                        .WithMany("Applications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevelopersDen.Contracts.DBModels.JobSeeker.JobSeeker", "JobSeeker")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.JobSeeker.JobSeekerProfile", b =>
                {
                    b.HasOne("DevelopersDen.Contracts.DBModels.JobSeeker.JobSeeker", "JobSeeker")
                        .WithOne("JobSeekerProfile")
                        .HasForeignKey("DevelopersDen.Contracts.DBModels.JobSeeker.JobSeekerProfile", "JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Recruiter.RecruiterAccount", b =>
                {
                    b.HasOne("DevelopersDen.Contracts.DBModels.Recruiter.Recruiter", "Recruiter")
                        .WithMany("RecruiterAccounts")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Subscription", b =>
                {
                    b.HasOne("DevelopersDen.Contracts.DBModels.Recruiter.Recruiter", "Recruiter")
                        .WithMany("Subscriptions")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevelopersDen.Contracts.DBModels.SubscriptionPlan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Job.Job", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.JobSeeker.JobSeeker", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("JobSeekerProfile");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Recruiter.Recruiter", b =>
                {
                    b.Navigation("RecruiterAccounts");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.Recruiter.RecruiterAccount", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("DevelopersDen.Contracts.DBModels.SubscriptionPlan", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
